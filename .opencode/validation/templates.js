/**
 * Validation Report Templates
 * Standardized templates for consistent validation output
 */

export const ValidationTemplates = {
  // Main validation report template
  mainReport: data => `# OpenCode Validation Report

**Generated:** ${data.timestamp}
**Session ID:** ${data.sessionId || 'N/A'}
**Overall Score:** ${data.summary.score}/100

## Executive Summary

${
  data.summary.score >= 90
    ? '🟢 **HIGH CONFIDENCE** - System is well-validated and ready for production.'
    : data.summary.score >= 70
      ? '🟡 **MEDIUM CONFIDENCE** - System is functional but needs attention.'
      : '🔴 **LOW CONFIDENCE** - Critical issues require immediate action.'
}

### Key Metrics
- **Total Tests:** ${data.summary.totalTests}
- **Passed:** ${data.summary.passed}
- **Failed:** ${data.summary.failed}
- **Success Rate:** ${Math.round((data.summary.passed / data.summary.totalTests) * 100)}%

## Detailed Test Results

| Component | Status | Confidence | Details |
|-----------|--------|------------|---------|
${Object.entries(data.tests)
  .map(
    ([name, test]) =>
      `| ${name.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())} | ${test.status === 'passed' ? '✅' : '❌'} | ${test.confidence || 'N/A'} | ${test.status} |`
  )
  .join('\n')}

## Findings by Category

### Security Findings
${
  data.findings?.security?.length > 0
    ? data.findings.security
        .map(finding => `- **${finding.severity}**: ${finding.title}`)
        .join('\n')
    : '✅ No security issues detected'
}

### Performance Findings
${
  data.findings?.performance?.length > 0
    ? data.findings.performance
        .map(finding => `- **${finding.impact}**: ${finding.title}`)
        .join('\n')
    : '✅ No performance issues detected'
}

### Code Quality Findings
${
  data.findings?.quality?.length > 0
    ? data.findings.quality.map(finding => `- **${finding.severity}**: ${finding.title}`).join('\n')
    : '✅ No code quality issues detected'
}

## Recommendations

### Immediate Actions (Priority 1)
${
  data.recommendations?.critical?.length > 0
    ? data.recommendations.critical.map(rec => `- ${rec}`).join('\n')
    : '✅ No critical actions required'
}

### Short-term Improvements (Priority 2)
${
  data.recommendations?.high?.length > 0
    ? data.recommendations.high.map(rec => `- ${rec}`).join('\n')
    : '✅ No high-priority improvements needed'
}

### Long-term Enhancements (Priority 3)
${
  data.recommendations?.medium?.length > 0
    ? data.recommendations.medium.map(rec => `- ${rec}`).join('\n')
    : '✅ No medium-priority enhancements needed'
}

## Validation Framework Status

- **Code Quality Rules:** ${data.frameworkStatus?.codeQuality || 'N/A'}
- **Performance Rules:** ${data.frameworkStatus?.performance || 'N/A'}
- **Security Rules:** ${data.frameworkStatus?.security || 'N/A'}
- **Integration:** ${data.frameworkStatus?.integration || 'N/A'}

## Metadata

- **Platform:** ${data.metadata?.platform || 'N/A'}
- **Node Version:** ${data.metadata?.nodeVersion || 'N/A'}
- **Working Directory:** ${data.metadata?.workingDirectory || 'N/A'}
- **Validation Version:** ${data.metadata?.version || '1.0.0'}

---

*This report was generated by the OpenCode Validation Framework*
*For support, visit: https://opencode.ai*
`,

  // Security validation template
  securityReport: data => `# Security Validation Report

**Generated:** ${data.timestamp}
**Scan Type:** ${data.scanType || 'Comprehensive'}
**Risk Level:** ${data.overallRisk || 'Unknown'}

## Security Summary

${
  data.summary?.critical > 0
    ? '🚨 **CRITICAL VULNERABILITIES DETECTED**'
    : data.summary?.high > 0
      ? '⚠️ **HIGH RISK ISSUES FOUND**'
      : data.summary?.medium > 0
        ? '🟡 **MEDIUM RISK ISSUES DETECTED**'
        : '🟢 **NO SIGNIFICANT SECURITY ISSUES**'
}

### Vulnerability Breakdown
- **Critical:** ${data.summary?.critical || 0}
- **High:** ${data.summary?.high || 0}
- **Medium:** ${data.summary?.medium || 0}
- **Low:** ${data.summary?.low || 0}
- **Info:** ${data.summary?.info || 0}

## Critical Findings

${
  data.findings?.critical?.length > 0
    ? data.findings.critical
        .map(
          finding => `### ${finding.title}
**CVSS Score:** ${finding.cvss}
**Exploitability:** ${finding.exploitability}
**Impact:** ${finding.impact}
**Description:** ${finding.description}
**Remediation:** ${finding.remediation}
`
        )
        .join('\n\n')
    : '✅ No critical vulnerabilities found'
}

## High Risk Findings

${
  data.findings?.high?.length > 0
    ? data.findings.high
        .map(
          finding => `### ${finding.title}
**CVSS Score:** ${finding.cvss}
**Category:** ${finding.category}
**Description:** ${finding.description}
**Remediation:** ${finding.remediation}
`
        )
        .join('\n\n')
    : '✅ No high-risk vulnerabilities found'
}

## False Positive Analysis

${
  data.falsePositives?.length > 0
    ? data.falsePositives
        .map(fp => `- **${fp.pattern}**: ${fp.description} (${fp.confidence}% confidence)`)
        .join('\n')
    : '✅ No false positives detected'
}

## Security Recommendations

### Immediate Actions
${
  data.recommendations?.immediate?.length > 0
    ? data.recommendations.immediate.map(rec => `- ${rec}`).join('\n')
    : '✅ No immediate actions required'
}

### Security Best Practices
${
  data.recommendations?.bestPractices?.length > 0
    ? data.recommendations.bestPractices.map(rec => `- ${rec}`).join('\n')
    : '✅ All security best practices implemented'
}

## Compliance Status

- **OWASP Top 10:** ${data.compliance?.owasp || 'N/A'}
- **GDPR Compliance:** ${data.compliance?.gdpr || 'N/A'}
- **Industry Standards:** ${data.compliance?.standards || 'N/A'}

---

*Security validation completed by OpenCode Security Auditor*
`,

  // Performance validation template
  performanceReport: data => `# Performance Validation Report

**Generated:** ${data.timestamp}
**Test Environment:** ${data.environment || 'Development'}
**Performance Score:** ${data.score || 'N/A'}/100

## Performance Summary

${
  data.score >= 90
    ? '🚀 **EXCELLENT PERFORMANCE** - All metrics within acceptable ranges'
    : data.score >= 70
      ? '⚡ **GOOD PERFORMANCE** - Minor optimizations recommended'
      : '🐌 **PERFORMANCE ISSUES** - Critical optimizations required'
}

### Key Metrics
- **Bundle Size:** ${data.metrics?.bundleSize || 'N/A'}
- **Build Time:** ${data.metrics?.buildTime || 'N/A'}
- **Load Time:** ${data.metrics?.loadTime || 'N/A'}
- **Memory Usage:** ${data.metrics?.memoryUsage || 'N/A'}

## Web Vitals Assessment

| Metric | Value | Status | Target |
|--------|-------|--------|--------|
${
  data.webVitals
    ? Object.entries(data.webVitals)
        .map(
          ([metric, value]) =>
            `| ${metric.toUpperCase()} | ${value.value} | ${value.status} | ${value.target} |`
        )
        .join('\n')
    : '| N/A | N/A | N/A | N/A |'
}

## Performance Issues

### Critical Issues
${
  data.issues?.critical?.length > 0
    ? data.issues.critical
        .map(issue => `- **${issue.title}**: ${issue.description} (Impact: ${issue.impact})`)
        .join('\n')
    : '✅ No critical performance issues'
}

### Optimization Opportunities
${
  data.issues?.opportunities?.length > 0
    ? data.issues.opportunities
        .map(opp => `- **${opp.title}**: ${opp.description} (Potential: ${opp.potential})`)
        .join('\n')
    : '✅ No optimization opportunities identified'
}

## Bundle Analysis

### Size Breakdown
${
  data.bundleAnalysis
    ? Object.entries(data.bundleAnalysis)
        .map(([chunk, size]) => `- **${chunk}:** ${size}`)
        .join('\n')
    : 'Bundle analysis not available'
}

### Largest Dependencies
${
  data.largestDeps?.length > 0
    ? data.largestDeps.map(dep => `- **${dep.name}:** ${dep.size} (${dep.percentage}%)`).join('\n')
    : 'Dependency analysis not available'
}

## Performance Recommendations

### Immediate Optimizations
${
  data.recommendations?.immediate?.length > 0
    ? data.recommendations.immediate.map(rec => `- ${rec}`).join('\n')
    : '✅ No immediate optimizations needed'
}

### Code Splitting Opportunities
${
  data.recommendations?.splitting?.length > 0
    ? data.recommendations.splitting.map(rec => `- ${rec}`).join('\n')
    : '✅ Code splitting is optimal'
}

### Caching Strategies
${
  data.recommendations?.caching?.length > 0
    ? data.recommendations.caching.map(rec => `- ${rec}`).join('\n')
    : '✅ Caching strategies are well-implemented'
}

## Performance Thresholds

| Metric | Current | Threshold | Status |
|--------|---------|-----------|--------|
${
  data.thresholds
    ? Object.entries(data.thresholds)
        .map(
          ([metric, config]) =>
            `| ${metric} | ${config.current} | ${config.threshold} | ${config.status} |`
        )
        .join('\n')
    : '| N/A | N/A | N/A | N/A |'
}

---

*Performance validation completed by OpenCode Performance Optimizer*
`,

  // Code quality validation template
  qualityReport: data => `# Code Quality Validation Report

**Generated:** ${data.timestamp}
**Files Analyzed:** ${data.filesAnalyzed || 0}
**Quality Score:** ${data.score || 'N/A'}/100

## Quality Summary

${
  data.score >= 90
    ? '💎 **EXCELLENT CODE QUALITY** - Meets all standards'
    : data.score >= 70
      ? '📝 **GOOD CODE QUALITY** - Minor improvements suggested'
      : '🔧 **QUALITY ISSUES** - Significant improvements needed'
}

### Code Metrics
- **Total Lines:** ${data.metrics?.totalLines || 0}
- **Functions:** ${data.metrics?.functions || 0}
- **Complexity:** ${data.metrics?.complexity || 'N/A'}
- **Test Coverage:** ${data.metrics?.coverage || 'N/A'}%

## Code Quality Issues

### Critical Issues
${
  data.issues?.critical?.length > 0
    ? data.issues.critical
        .map(
          issue => `### ${issue.title}
**File:** ${issue.file}:${issue.line}
**Severity:** ${issue.severity}
**Description:** ${issue.description}
**Suggestion:** ${issue.suggestion}
`
        )
        .join('\n\n')
    : '✅ No critical quality issues'
}

### Style Violations
${
  data.issues?.style?.length > 0
    ? data.issues.style
        .map(issue => `- **${issue.rule}**: ${issue.description} (${issue.file}:${issue.line})`)
        .join('\n')
    : '✅ No style violations detected'
}

### Best Practice Violations
${
  data.issues?.practices?.length > 0
    ? data.issues.practices.map(issue => `- **${issue.practice}**: ${issue.description}`).join('\n')
    : '✅ All best practices followed'
}

## Complexity Analysis

### Cyclomatic Complexity
${
  data.complexity?.cyclomatic
    ? Object.entries(data.complexity.cyclomatic)
        .map(
          ([file, complexity]) =>
            `- **${file}:** ${complexity} ${complexity > 10 ? '(High - consider refactoring)' : '(Good)'}`
        )
        .join('\n')
    : 'Complexity analysis not available'
}

### Cognitive Complexity
${
  data.complexity?.cognitive
    ? Object.entries(data.complexity.cognitive)
        .map(
          ([file, complexity]) =>
            `- **${file}:** ${complexity} ${complexity > 15 ? '(High - consider simplifying)' : '(Good)'}`
        )
        .join('\n')
    : 'Cognitive complexity analysis not available'
}

## Maintainability Index

| File | Maintainability | Rating |
|------|----------------|--------|
${
  data.maintainability
    ? Object.entries(data.maintainability)
        .map(
          ([file, index]) =>
            `| ${file} | ${index} | ${index > 80 ? 'Excellent' : index > 60 ? 'Good' : 'Needs Improvement'} |`
        )
        .join('\n')
    : '| N/A | N/A | N/A |'
}

## Code Quality Recommendations

### Immediate Fixes
${
  data.recommendations?.immediate?.length > 0
    ? data.recommendations.immediate.map(rec => `- ${rec}`).join('\n')
    : '✅ No immediate fixes needed'
}

### Refactoring Opportunities
${
  data.recommendations?.refactoring?.length > 0
    ? data.recommendations.refactoring.map(rec => `- ${rec}`).join('\n')
    : '✅ Code structure is optimal'
}

### Testing Improvements
${
  data.recommendations?.testing?.length > 0
    ? data.recommendations.testing.map(rec => `- ${rec}`).join('\n')
    : '✅ Test coverage is adequate'
}

## Quality Standards Compliance

- **ESLint:** ${data.compliance?.eslint || 'N/A'}
- **TypeScript:** ${data.compliance?.typescript || 'N/A'}
- **Prettier:** ${data.compliance?.prettier || 'N/A'}
- **Testing:** ${data.compliance?.testing || 'N/A'}

---

*Code quality validation completed by OpenCode Code Reviewer*
`,
}

// Utility functions for template processing
export const TemplateUtils = {
  formatTimestamp: timestamp => {
    return new Date(timestamp).toLocaleString()
  },

  calculateConfidence: findings => {
    if (!findings || findings.length === 0) return 1.0

    const criticalCount = findings.filter(f => f.severity === 'critical').length
    const highCount = findings.filter(f => f.severity === 'high').length

    if (criticalCount > 0) return 0.3
    if (highCount > 2) return 0.5
    if (highCount > 0) return 0.7
    return 0.9
  },

  generateSummary: data => {
    const score = data.summary?.score || 0
    const passed = data.summary?.passed || 0
    const total = data.summary?.totalTests || 1

    return {
      score,
      passed,
      total,
      successRate: Math.round((passed / total) * 100),
      confidence: TemplateUtils.calculateConfidence(data.findings || []),
    }
  },
}

export default ValidationTemplates
